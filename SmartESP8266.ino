// Inclusion des biblioth√®ques n√©cessaires
#include "SmartESP32Utils.h" // Assure-toi que cette lib est compatible ESP8266
#include <ESP8266WiFi.h>
#include <ESPAsyncTCP.h>
#include <ESPAsyncWebServer.h>

// Informations d'identification WiFi
const char* ssid = "N1";
const char* password = "yannyann";

// Initialisation du serveur web asynchrone
AsyncWebServer server(80);
String lastCommand = "";
AutoUpdatePayload payload;
unsigned long lastUpdateTime = 0;
const unsigned long updateInterval = 500; // Intervalle de mise √† jour en millisecondes

// D√©finition de la broche du potentiom√®tre
const int PIN_POTENTIO = A0;
int potenValue = 0;
float potenPct = 0.0;

void setup() {
  Serial.begin(115200); // Initialisation de la communication s√©rie
  connectToWiFi(ssid, password); // Connexion au r√©seau WiFi
  setupWebSocket(server, &lastCommand); // Configuration du WebSocket
}

void loop() {
  Smartcommande(); // Gestion des commandes intelligentes
  Autoupdate(); // Mise √† jour automatique des donn√©es
}

void Smartcommande() {
  // V√©rifie s'il y a une nouvelle commande
  if (!lastCommand.isEmpty()) {
    lastCommand = "";
    sendAutoUpdate(payload);
    payload.notif = "false";
    payload.ia = "false";
  }
}

void Autoupdate() {
  // Met √† jour les donn√©es √† intervalles r√©guliers
  if (millis() - lastUpdateTime > updateInterval) {
    lirePoten(); // Lecture de la valeur du potentiom√®tre

    // Envoi des donn√©es lues
    payload.ecran1 = potenValue;
    payload.indicateur1 = potenPct;

    sendAutoUpdate(payload);
    lastUpdateTime = millis(); // Met √† jour le temps de la derni√®re mise √† jour
  }
}

void lirePoten() {
  // Lit la valeur du potentiom√®tre et calcule le pourcentage
  potenValue = analogRead(PIN_POTENTIO);
  potenPct = potenValue / 1023.0;
}

//üî¢ Pourquoi 1023 ?
//L‚ÄôESP8266 poss√®de un ADC (Analog to Digital Converter) de 10 bits, ce qui signifie qu‚Äôil convertit une tension analogique en une valeur num√©rique comprise entre :

//0 ‚Üí pour 0V

//1023 ‚Üí pour la tension maximale admissible (en g√©n√©ral 1.0V ou 3.3V selon les modules)

//Donc, la formule :

//pourcentage = analogRead(A0) / 1023.0;
